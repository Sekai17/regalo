<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Psico Kit ‚Äî Pizarra ¬∑ Mapa Mental ¬∑ Biblioteca ¬∑ Crono</title>
<style>
  :root{
    --bg:#0b0f14;          /* fondo oscuro elegante */
    --panel:#121922;       /* paneles */
    --muted:#233143;       /* bordes / l√≠neas */
    --text:#e8f0ff;        /* texto */
    --text-dim:#a9b9d2;    /* texto suave */
    --brand:#6ea8fe;       /* acento */
    --ok:#37d399;          /* ok */
    --warn:#fbbf24;        /* alerta */
    --danger:#fb7185;      /* peligro */
    --note-yellow:#fde68a; --note-pink:#fbcfe8; --note-green:#bbf7d0; --note-blue:#bfdbfe; --note-lilac:#ddd6fe;
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{margin:0;background:var(--bg);color:var(--text);font:14px/1.4 ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial}
  a{color:var(--brand)}
  button,input,select,textarea{font:inherit;color:inherit}
  button{background:var(--muted);border:1px solid #0000;border-radius:10px;padding:.55rem .8rem;cursor:pointer}
  button:hover{border-color:var(--brand)}
  .app{display:grid;grid-template-rows:auto 1fr;min-height:100vh}
  header{display:flex;gap:.75rem;align-items:center;padding:.75rem 1rem;border-bottom:1px solid var(--muted);background:linear-gradient(180deg, #0c121a, #0b0f14)}
  header .brand{font-weight:700;letter-spacing:.3px}
  header .spacer{flex:1}
  header input[type="search"]{min-width:280px;background:#0f1620;border:1px solid var(--muted);border-radius:10px;padding:.5rem .8rem}
  .tabs{display:flex;gap:.5rem}
  .tab-btn{padding:.5rem .75rem;border-radius:10px;background:#0f1620;border:1px solid var(--muted)}
  .tab-btn.active{background:var(--panel);border-color:var(--brand)}

  main{display:grid;grid-template-columns:260px 1fr;gap:0}
  aside{border-right:1px solid var(--muted);background:var(--panel);padding:1rem;display:flex;flex-direction:column;gap:.75rem}
  aside h3{margin:.5rem 0}
  .toolbar{display:flex;flex-wrap:wrap;gap:.5rem}
  .toolbar .group{display:flex;gap:.5rem;flex-wrap:wrap}
  .hint{color:var(--text-dim);font-size:12px}
  .chips{display:flex;flex-wrap:wrap;gap:.4rem}
  .chip{background:#0f1620;border:1px solid var(--muted);padding:.2rem .55rem;border-radius:999px;font-size:12px;cursor:pointer}
  .chip.active{border-color:var(--brand);background:#0c1118}

  /* Vistas */
  .view{display:none;height:calc(100vh - 60px)}
  .view.active{display:block}

  /* 1) PIZARRA */
  #board-wrap{position:relative;overflow:auto;background:#0a1017}
  #board{position:relative;min-width:1600px;min-height:1000px;background:radial-gradient(ellipse at top left, #0f1622, #0a1017 60%),
                                    linear-gradient(90deg, #0c1520 1px, #0a1017 1px) 0 0/80px 80px,
                                    linear-gradient(#0c1520 1px, #0a1017 1px) 0 0/80px 80px}
  .note{position:absolute;width:220px;min-height:160px;border-radius:14px;box-shadow:0 10px 30px #0005;border:1px solid #00000022;display:flex;flex-direction:column;overflow:hidden}
  .note .head{display:flex;align-items:center;gap:.5rem;padding:.4rem .55rem;background:#0002;cursor:grab}
  .note .head:active{cursor:grabbing}
  .note .title{flex:1;font-weight:700;color:#0b1220}
  .note .close{background:#0000;border:0;color:#0008;font-weight:700;cursor:pointer}
  .note .body{flex:1;padding:.6rem .7rem;color:#07111a}
  .note .tags{padding:.4rem .6rem;border-top:1px dashed #0005;color:#233}
  .note .tags span{display:inline-block;background:#00000014;padding:.1rem .4rem;border-radius:999px;margin:.1rem;font-size:12px}
  .color-dot{width:12px;height:12px;border-radius:999px;border:1px solid #0006}
  .note[data-color="yellow"]{background:var(--note-yellow)}
  .note[data-color="pink"]{background:var(--note-pink)}
  .note[data-color="green"]{background:var(--note-green)}
  .note[data-color="blue"]{background:var(--note-blue)}
  .note[data-color="lilac"]{background:var(--note-lilac)}

  /* 2) MAPA MENTAL */
  #map{position:relative;overflow:hidden;background:linear-gradient(180deg,#0a1119,#0c1520)}
  #map svg{width:100%;height:100%}
  .node{cursor:grab}
  .node rect{fill:#0f1b29;stroke:#2a3a52;stroke-width:1.2}
  .node.selected rect{stroke:var(--brand);stroke-width:2}
  .node text{fill:#d8e7ff;font-weight:600}
  .edge{stroke:#3c516f;stroke-width:1.5}
  .edge.selected{stroke:var(--brand);stroke-width:2}
  .badge{position:absolute;right:10px;top:10px;background:#0f1620;border:1px solid var(--muted);padding:.25rem .5rem;border-radius:8px;color:var(--text-dim)}

  /* 3) BIBLIOTECA */
  #library{padding:1rem}
  .grid{display:grid;grid-template-columns:repeat(6,1fr);gap:.6rem}
  .grid input,.grid textarea{background:#0f1620;border:1px solid var(--muted);border-radius:10px;padding:.5rem}
  .grid textarea{grid-column:1/-1;min-height:80px}
  table{width:100%;border-collapse:collapse;margin-top:.8rem}
  th,td{border-bottom:1px solid var(--muted);padding:.55rem;text-align:left}
  tbody tr:hover{background:#0f1620}

  /* 4) CRONO */
  #crono{padding:1rem}
  .list{display:flex;flex-direction:column;gap:.5rem;margin-top:.6rem}
  .card{background:#0f1620;border:1px solid var(--muted);border-radius:12px;padding:.7rem}
  .date{font-weight:700}
  .days{color:var(--text-dim)}

  /* Footer tools */
  footer.tools{position:fixed;left:12px;bottom:12px;display:flex;gap:.5rem;align-items:center;background:#0f1620;border:1px solid var(--muted);padding:.4rem .6rem;border-radius:12px}
  footer.tools input[type=file]{display:none}

  /* Responsive */
  @media (max-width: 900px){
    main{grid-template-columns:1fr}
    aside{order:2}
  }
</style>
</head>
<body>
<div class="app" id="app">
  <header>
    <div class="brand">üß† Psico Kit</div>
    <div class="tabs">
      <button class="tab-btn active" data-tab="board">Pizarra</button>
      <button class="tab-btn" data-tab="map">Mapa</button>
      <button class="tab-btn" data-tab="library">Biblioteca</button>
      <button class="tab-btn" data-tab="crono">Crono</button>
    </div>
    <div class="spacer"></div>
    <input id="globalSearch" type="search" placeholder="Buscar (notas, nodos, citas)‚Ä¶ Ctrl/‚åò+F"/>
  </header>

  <main>
    <aside>
      <h3>Herramientas</h3>
      <!-- TOOLBARS CHANGING BY TAB -->
      <div id="toolbar-board" class="toolbar">
        <div class="group">
          <button id="btnNewNote">‚ûï Nueva nota (N)</button>
          <button id="btnCenterBoard">üéØ Centrar</button>
          <button id="btnClearFilters">‚ùå Filtros</button>
        </div>
        <div class="group">
          <span class="hint">Filtra por etiqueta:</span>
          <div id="tagChips" class="chips"></div>
        </div>
        <div class="hint">Arrastra las notas desde la barra superior. Doble clic para resaltar.</div>
      </div>

      <div id="toolbar-map" class="toolbar" style="display:none">
        <div class="group">
          <button id="btnNewNode">üü¶ Nuevo nodo (doble clic en lienzo)</button>
          <button id="btnConnect">üß∑ Conectar</button>
          <button id="btnCenterMap">üéØ Centrar</button>
        </div>
        <div class="hint">Doble clic para crear nodo. Arrastra para mover. Conectar: seleccionar origen ‚Üí destino.</div>
      </div>

      <div id="toolbar-library" class="toolbar" style="display:none">
        <div class="group">
          <button id="btnAddRef">‚ûï Agregar cita</button>
        </div>
        <div class="hint">Guarda citas/obras y busca por autor/tema/palabra.</div>
      </div>

      <div id="toolbar-crono" class="toolbar" style="display:none">
        <form id="eventForm" class="group" onsubmit="return false;">
          <input id="evtTitle" required placeholder="T√≠tulo (Parcial, TP, etc.)"/>
          <input id="evtDate" type="date" required />
          <select id="evtPlan">
            <option value="">Plan sugerido‚Ä¶</option>
            <option>Pomodoro x4 (2h)</option>
            <option>Lectura focalizada (1h)</option>
            <option>Mapa mental + resumen (1h)</option>
            <option>Pr√°ctica preguntas antiguas (1h)</option>
          </select>
          <button id="btnAddEvent">‚ûï A√±adir</button>
        </form>
        <div class="hint">Consejo: crea el evento al menos 7 d√≠as antes para evitar cram last-minute.</div>
      </div>

      <h3>Exportar / Importar</h3>
      <div class="toolbar">
        <div class="group">
          <button id="btnExport">‚¨áÔ∏è Exportar JSON</button>
          <label for="fileImport" class="button" style="display:inline-block"><button>‚¨ÜÔ∏è Importar JSON</button></label>
          <input id="fileImport" type="file" accept="application/json" />
        </div>
        <div class="hint">Todo se guarda localmente en el navegador. Puedes hacer backup con Exportar.</div>
      </div>

      <h3>Atajos</h3>
      <div class="hint">N: nueva nota ¬∑ Ctrl/‚åò+F: buscar ¬∑ Supr: borrar selecci√≥n (mapa)</div>
    </aside>

    <!-- Views -->
    <section id="view-board" class="view active">
      <div id="board-wrap">
        <div id="board"></div>
      </div>
    </section>

    <section id="view-map" class="view">
      <div id="map">
        <div class="badge" id="modeBadge">Modo: normal</div>
        <svg id="svg" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <marker id="arrow" viewBox="0 0 10 10" refX="10" refY="5" markerWidth="8" markerHeight="8" orient="auto-start-reverse">
              <path d="M 0 0 L 10 5 L 0 10 z" fill="#446385"></path>
            </marker>
          </defs>
          <g id="zoom" transform="translate(0,0) scale(1)">
            <g id="edges"></g>
            <g id="nodes"></g>
          </g>
        </svg>
      </div>
    </section>

    <section id="view-library" class="view">
      <div id="library">
        <form id="refForm" onsubmit="return false;" class="grid">
          <input id="refAutor" placeholder="Autor" />
          <input id="refAnio" placeholder="A√±o" />
          <input id="refObra" placeholder="Obra / Art√≠culo" />
          <input id="refTema" placeholder="Tema (sue√±os, desarrollo‚Ä¶)" />
          <input id="refPalabras" placeholder="Palabras clave" />
          <button id="refAdd">Guardar</button>
          <textarea id="refCita" placeholder="Cita textual o resumen"></textarea>
        </form>
        <input id="refSearch" type="search" placeholder="Buscar en biblioteca‚Ä¶ (autor, obra, tema, texto)" style="width:100%;margin-top:.5rem;background:#0f1620;border:1px solid var(--muted);border-radius:10px;padding:.5rem" />
        <table>
          <thead><tr><th>Autor</th><th>A√±o</th><th>Obra</th><th>Tema</th><th>Cita</th><th></th></tr></thead>
          <tbody id="refTable"></tbody>
        </table>
      </div>
    </section>

    <section id="view-crono" class="view">
      <div id="crono">
        <div class="list" id="eventList"></div>
      </div>
    </section>
  </main>

  <footer class="tools">
    <span>üíæ Auto-guardado</span>
    <span id="saveDot" style="width:8px;height:8px;border-radius:50%;background:var(--ok);display:inline-block"></span>
    <button id="btnReset" title="Borrar todo (pregunta antes)">üóëÔ∏è Reset</button>
  </footer>
</div>

<!-- Modales b√°sicos -->
<div id="modal" style="position:fixed;inset:0;background:#0008;display:none;align-items:center;justify-content:center;padding:1rem">
  <div style="background:var(--panel);border:1px solid var(--muted);border-radius:14px;max-width:680px;width:100%;padding:1rem">
    <div style="display:flex;align-items:center;justify-content:space-between;gap:1rem">
      <h3 id="modalTitle" style="margin:.2rem 0">Editar</h3>
      <button id="modalClose">‚úñ</button>
    </div>
    <div id="modalBody" style="margin-top:.5rem"></div>
    <div style="display:flex;justify-content:flex-end;gap:.5rem;margin-top:.8rem">
      <button id="modalCancel">Cancelar</button>
      <button id="modalOk" style="background:var(--brand)">Guardar</button>
    </div>
  </div>
</div>

<script>
(function(){
  const el = s => document.querySelector(s);
  const els = s => Array.from(document.querySelectorAll(s));
  const app = { state:{ notes:[], nodes:[], edges:[], refs:[], events:[] }, sel:null, tab:'board', connectMode:false, zoom:{k:1, x:0, y:0} };
  const STORAGE_KEY = 'psicoKitState@v1';
  let saveTimer = null;

  const palette = ['yellow','pink','green','blue','lilac'];

  function load(){
    try{
      const raw = localStorage.getItem(STORAGE_KEY);
      if(raw){ app.state = JSON.parse(raw); }
      else { seed(); save(); }
    }catch(e){ console.warn('No state yet', e); seed(); }
  }
  function seed(){
    app.state = {
      notes:[
        {id: id('n'), title:'Piaget ‚Äî Etapas', text:'Sensorio-motriz, preoperacional, operaciones concretas, formales‚Ä¶', tags:['desarrollo','piaget'], color:'yellow', x:260, y:160},
        {id: id('n'), title:'Freud ‚Äî Sue√±os', text:'Contenido manifiesto vs. latente. La interpretaci√≥n como v√≠a regia al inconsciente.', tags:['psicoan√°lisis','sue√±os'], color:'pink', x:560, y:260}
      ],
      nodes:[
        {id:id('m'), label:'Conductismo', x:400, y:240},
        {id:id('m'), label:'Cognitivismo', x:700, y:200},
        {id:id('m'), label:'Psicoan√°lisis', x:520, y:420}
      ],
      edges:[{id:id('e'), from:0, to:1, label:'evoluci√≥n' }],
      refs:[
        {id:id('r'), autor:'Freud', anio:'1900', obra:'La interpretaci√≥n de los sue√±os', tema:'sue√±os', palabras:'inconsciente, deseo', cita:'Los sue√±os son la v√≠a regia al inconsciente.'},
        {id:id('r'), autor:'Piaget', anio:'1952', obra:'El origen de la inteligencia en el ni√±o', tema:'desarrollo', palabras:'etapas, esquema', cita:'La inteligencia es lo que usas cuando no sabes qu√© hacer.'}
      ],
      events:[
        {id:id('e'), titulo:'Parcial Psicolog√≠a II', fecha: plusDays(35), plan:'Pomodoro x4 (2h)'},
        {id:id('e'), titulo:'Entregar TP Conductismo', fecha: plusDays(10), plan:'Mapa mental + resumen (1h)'}
      ]
    };
  }
  function id(prefix='x'){return prefix+Math.random().toString(36).slice(2,8)}
  function plusDays(n){ const d=new Date(); d.setDate(d.getDate()+n); return d.toISOString().slice(0,10); }

  function save(){
    localStorage.setItem(STORAGE_KEY, JSON.stringify(app.state));
    pulseSave();
  }
  function debouncedSave(){
    clearTimeout(saveTimer); saveTimer = setTimeout(save, 400);
  }
  function pulseSave(){
    const dot = el('#saveDot');
    dot.style.background = 'var(--ok)';
    setTimeout(()=> dot.style.background = 'var(--brand)', 300);
  }

  function switchTab(tab){
    app.tab = tab;
    els('.tab-btn').forEach(b => b.classList.toggle('active', b.dataset.tab===tab));
    els('.view').forEach(v => v.classList.remove('active'));
    el('#view-'+tab).classList.add('active');
    // toolbars
    el('#toolbar-board').style.display = (tab==='board')?'flex':'none';
    el('#toolbar-map').style.display = (tab==='map')?'flex':'none';
    el('#toolbar-library').style.display = (tab==='library')?'flex':'none';
    el('#toolbar-crono').style.display = (tab==='crono')?'flex':'none';
  }

  // 1) PIZARRA
  function renderBoard(){
    const wrap = el('#board');
    wrap.innerHTML = '';
    const q = el('#globalSearch').value.toLowerCase().trim();
    const activeTags = Array.from(el('#tagChips').querySelectorAll('.chip.active')).map(c=>c.dataset.tag);

    for(const note of app.state.notes){
      // filters
      const haystack = (note.title+' '+note.text+' '+(note.tags||[]).join(' ')).toLowerCase();
      const matchesQ = !q || haystack.includes(q);
      const matchesTag = activeTags.length===0 || (note.tags||[]).some(t=>activeTags.includes(t));
      if(!(matchesQ && matchesTag)) continue;

      const n = document.createElement('div');
      n.className = 'note';
      n.dataset.id = note.id;
      n.dataset.color = note.color || 'yellow';
      n.style.left = (note.x||100)+ 'px';
      n.style.top = (note.y||100)+ 'px';
      n.innerHTML = `
        <div class="head" data-drag>
          <div class="color-dot" title="Cambiar color"></div>
          <div class="title" contenteditable="true"></div>
          <button class="close" title="Eliminar">√ó</button>
        </div>
        <div class="body" contenteditable="true"></div>
        <div class="tags"></div>
      `;
      n.querySelector('.title').textContent = note.title||'';
      n.querySelector('.body').textContent = note.text||'';
      const tagsEl = n.querySelector('.tags');
      tagsEl.innerHTML = (note.tags||[]).map(t=>`<span>#${t}</span>`).join('') + ` <button class="mini-edit" style="margin-left:.3rem">‚úèÔ∏è</button>`;

      // events
      // edit fields
      n.querySelector('.title').addEventListener('input', (e)=>{ note.title=e.target.textContent; debouncedSave(); refreshTags(); });
      n.querySelector('.body').addEventListener('input', (e)=>{ note.text=e.target.textContent; debouncedSave(); });
      n.querySelector('.mini-edit').addEventListener('click', ()=> editNoteTags(note));

      // color cycle
      n.querySelector('.color-dot').addEventListener('click', ()=>{
        const idx = palette.indexOf(note.color||'yellow');
        note.color = palette[(idx+1)%palette.length];
        n.dataset.color = note.color; debouncedSave();
      });

      // close/delete
      n.querySelector('.close').addEventListener('click', ()=>{
        if(confirm('¬øEliminar esta nota?')){
          app.state.notes = app.state.notes.filter(x=>x.id!==note.id);
          save(); renderBoard(); refreshTags();
        }
      });

      // drag
      const head = n.querySelector('[data-drag]');
      let dragging=false, sx=0, sy=0, ox=0, oy=0;
      head.addEventListener('pointerdown', (e)=>{
        dragging=true; sx=e.clientX; sy=e.clientY; ox=note.x||0; oy=note.y||0; head.setPointerCapture(e.pointerId);
      });
      head.addEventListener('pointermove', (e)=>{
        if(!dragging) return; const dx=e.clientX-sx, dy=e.clientY-sy; note.x=ox+dx; note.y=oy+dy; n.style.left=note.x+'px'; n.style.top=note.y+'px';
      });
      head.addEventListener('pointerup', (e)=>{ dragging=false; head.releasePointerCapture(e.pointerId); debouncedSave(); });

      // dblclick to highlight
      n.addEventListener('dblclick', ()=>{ n.style.outline='3px solid var(--brand)'; setTimeout(()=> n.style.outline='none', 800); });

      wrap.appendChild(n);
    }
  }

  function editNoteTags(note){
    openModal('Etiquetas de la nota', htmlFrag(`
      <label>Escribe etiquetas separadas por coma</label>
      <input id="tagsInput" style="width:100%;background:#0f1620;border:1px solid var(--muted);border-radius:10px;padding:.5rem" value="${(note.tags||[]).join(', ')}" />
    `), ()=>{
      const v = el('#tagsInput').value.trim();
      note.tags = v? v.split(',').map(s=>s.trim()).filter(Boolean):[];
      save(); renderBoard(); refreshTags();
    });
  }

  function refreshTags(){
    const all = new Set();
    for(const n of app.state.notes){ (n.tags||[]).forEach(t=>all.add(t)); }
    const wrap = el('#tagChips');
    wrap.innerHTML='';
    [...all].sort().forEach(tag=>{
      const c = document.createElement('button'); c.type='button'; c.className='chip'; c.dataset.tag=tag; c.textContent = '#'+tag;
      c.addEventListener('click',()=>{ c.classList.toggle('active'); renderBoard(); });
      wrap.appendChild(c);
    });
  }

  // 2) MAPA MENTAL
  const svg = { root: null, zoom: null, nodes: null, edges: null };
  function initSVG(){
    svg.root = el('#svg');
    svg.zoom = el('#zoom');
    svg.nodes = el('#nodes');
    svg.edges = el('#edges');
    // background interactions: zoom/pan
    svg.root.addEventListener('wheel', (e)=>{ e.preventDefault(); const scaleBy = 1.06; const {k} = app.zoom; const dir = e.deltaY>0 ? 1/scaleBy : scaleBy; const pt = clientToSvg(e.clientX,e.clientY); app.zoom.k = Math.max(0.4, Math.min(2.5, k*dir));
      // simple zoom to cursor
      app.zoom.x = pt.x - (pt.x - app.zoom.x) * (app.zoom.k / k);
      app.zoom.y = pt.y - (pt.y - app.zoom.y) * (app.zoom.k / k);
      applyZoom();
    }, {passive:false});

    let panning=false, sx=0, sy=0, ox=0, oy=0;
    svg.root.addEventListener('pointerdown', (e)=>{ if(e.target===svg.root){ panning=true; sx=e.clientX; sy=e.clientY; ox=app.zoom.x; oy=app.zoom.y; svg.root.setPointerCapture(e.pointerId);} });
    svg.root.addEventListener('pointermove', (e)=>{ if(!panning) return; app.zoom.x=ox+(e.clientX-sx); app.zoom.y=oy+(e.clientY-sy); applyZoom(); });
    svg.root.addEventListener('pointerup', (e)=>{ if(panning){ panning=false; svg.root.releasePointerCapture(e.pointerId);} });

    svg.root.addEventListener('dblclick', (e)=>{
      if(app.tab!=='map') return;
      if(e.target!==svg.root) return; // only background
      const pt = clientToSvg(e.clientX,e.clientY,true);
      createNode(pt.x, pt.y);
    });
  }
  function clientToSvg(cx,cy,withInverse=false){
    const CTM = svg.zoom.getScreenCTM();
    const pt = svg.root.createSVGPoint(); pt.x=cx; pt.y=cy;
    const inv = CTM.inverse();
    const p = pt.matrixTransform(inv);
    return { x: p.x, y: p.y };
  }
  function applyZoom(){ svg.zoom.setAttribute('transform', `translate(${app.zoom.x},${app.zoom.y}) scale(${app.zoom.k})`); }

  function renderMap(){
    svg.nodes.innerHTML=''; svg.edges.innerHTML='';
    // edges first
    app.state.edges.forEach((e,i)=>{
      const a = app.state.nodes[e.from];
      const b = app.state.nodes[e.to];
      if(!a || !b) return;
      const line = document.createElementNS('http://www.w3.org/2000/svg','line');
      line.classList.add('edge');
      line.setAttribute('x1', a.x); line.setAttribute('y1', a.y);
      line.setAttribute('x2', b.x); line.setAttribute('y2', b.y);
      line.setAttribute('marker-end', 'url(#arrow)');
      svg.edges.appendChild(line);
    });
    // nodes
    app.state.nodes.forEach((n,i)=>{
      const g = document.createElementNS('http://www.w3.org/2000/svg','g'); g.classList.add('node'); g.dataset.index=i;
      const rect = document.createElementNS('http://www.w3.org/2000/svg','rect'); rect.setAttribute('x', n.x-70); rect.setAttribute('y', n.y-24); rect.setAttribute('rx', 10); rect.setAttribute('ry', 10); rect.setAttribute('width', 140); rect.setAttribute('height', 48);
      const text = document.createElementNS('http://www.w3.org/2000/svg','text'); text.setAttribute('x', n.x); text.setAttribute('y', n.y+5); text.setAttribute('text-anchor','middle'); text.textContent = n.label;
      g.appendChild(rect); g.appendChild(text);

      // drag
      let dragging=false, sx=0, sy=0, ox=0, oy=0;
      g.addEventListener('pointerdown', (e)=>{ dragging=true; sx=e.clientX; sy=e.clientY; ox=n.x; oy=n.y; g.setPointerCapture(e.pointerId); selectNode(i); });
      g.addEventListener('pointermove', (e)=>{ if(!dragging) return; const pt = clientToSvg(e.clientX,e.clientY,true); n.x = pt.x - (sx-e.clientX)/app.zoom.k; n.y = pt.y - (sy-e.clientY)/app.zoom.k; updateNode(i); });
      g.addEventListener('pointerup', (e)=>{ dragging=false; g.releasePointerCapture(e.pointerId); debouncedSave(); });

      // click connect mode
      g.addEventListener('click', (e)=>{
        if(app.connectMode){
          handleConnectClick(i);
        }
      });

      // dblclick edit
      g.addEventListener('dblclick', ()=> editNode(i));

      svg.nodes.appendChild(g);
    });
  }
  function selectNode(i){ els('.node').forEach(n=>n.classList.remove('selected')); const g = svg.nodes.querySelector(`[data-index="${i}"]`); if(g) g.classList.add('selected'); app.sel={type:'node', index:i}; }
  function updateNode(i){ renderMap(); }
  function createNode(x,y){
    const n = {id:id('m'), label:'Nuevo nodo', x, y};
    app.state.nodes.push(n); save(); renderMap(); editNode(app.state.nodes.length-1);
  }
  function editNode(i){
    const n = app.state.nodes[i];
    openModal('Editar nodo', htmlFrag(`
      <label>Etiqueta</label>
      <input id="n_label" style="width:100%;background:#0f1620;border:1px solid var(--muted);border-radius:10px;padding:.5rem" value="${esc(n.label)}">
      <label style="margin-top:.5rem">Resumen</label>
      <textarea id="n_sum" style="width:100%;height:120px;background:#0f1620;border:1px solid var(--muted);border-radius:10px;padding:.5rem">${esc(n.summary||'')}</textarea>
      <div style="display:flex;justify-content:space-between;align-items:center;margin-top:.5rem">
        <button id="n_delete" style="background:var(--danger)">Eliminar nodo</button>
        <span class="hint">Doble clic en el lienzo para crear m√°s nodos.</span>
      </div>
    `), ()=>{
      n.label = el('#n_label').value.trim()||'Nodo';
      n.summary = el('#n_sum').value.trim();
      save(); renderMap();
    });
    setTimeout(()=>{ el('#n_delete').onclick = ()=>{ if(confirm('¬øEliminar nodo y sus conexiones?')){ deleteNode(i); closeModal(); } } },0);
  }
  function deleteNode(i){
    app.state.nodes.splice(i,1);
    // ajustar edges que referencian √≠ndices
    app.state.edges = app.state.edges.filter(e=> e.from!==i && e.to!==i).map(e=>({ ...e, from: e.from>i? e.from-1:e.from, to: e.to>i? e.to-1:e.to }));
    save(); renderMap();
  }
  let connectFrom = null;
  function toggleConnect(){ app.connectMode = !app.connectMode; el('#btnConnect').classList.toggle('active', app.connectMode); el('#modeBadge').textContent = 'Modo: '+(app.connectMode? 'conectar':'normal'); if(!app.connectMode) connectFrom=null; }
  function handleConnectClick(i){ if(connectFrom==null){ connectFrom = i; highlightNode(i,true); } else { if(connectFrom!==i){ app.state.edges.push({id:id('e'), from: connectFrom, to: i}); save(); renderMap(); } highlightNode(connectFrom,false); connectFrom=null; toggleConnect(); }}
  function highlightNode(i,on){ const g = svg.nodes.querySelector(`[data-index="${i}"]`); if(g){ g.classList.toggle('selected', !!on); }}

  function centerMap(){ app.zoom = {k:1, x:0, y:0}; applyZoom(); }

  // 3) BIBLIOTECA
  function addRef(ref){ app.state.refs.unshift(ref); save(); renderRefs(); }
  function renderRefs(){
    const q = el('#refSearch').value.toLowerCase().trim();
    const tbody = el('#refTable'); tbody.innerHTML='';
    for(const r of app.state.refs){
      const hay = [r.autor,r.anio,r.obra,r.tema,r.palabras,r.cita].join(' ').toLowerCase();
      if(q && !hay.includes(q)) continue;
      const tr = document.createElement('tr');
      tr.innerHTML = `<td>${esc(r.autor)}</td><td>${esc(r.anio)}</td><td>${esc(r.obra)}</td><td>${esc(r.tema)}</td><td>${esc(r.cita)}</td><td><button data-id="${r.id}" class="copy">üìã Copiar</button> <button data-id="${r.id}" class="del" title="Eliminar">üóëÔ∏è</button></td>`;
      tbody.appendChild(tr);
    }
    tbody.querySelectorAll('button.copy').forEach(b=> b.addEventListener('click', ()=> copyCitation(b.dataset.id)) );
    tbody.querySelectorAll('button.del').forEach(b=> b.addEventListener('click', ()=> delRef(b.dataset.id)) );
  }
  function copyCitation(idv){
    const r = app.state.refs.find(x=>x.id===idv); if(!r) return;
    const text = `${r.autor} (${r.anio}). ${r.obra}. ‚Äî ${r.cita}`;
    navigator.clipboard.writeText(text); alert('Cita copiada al portapapeles');
  }
  function delRef(idv){ if(confirm('¬øEliminar esta entrada?')){ app.state.refs = app.state.refs.filter(x=>x.id!==idv); save(); renderRefs(); } }

  // 4) CRONO
  function renderEvents(){
    const list = el('#eventList'); list.innerHTML='';
    const arr = [...app.state.events].sort((a,b)=> (a.fecha>b.fecha?1:-1));
    const today = new Date().toISOString().slice(0,10);
    for(const ev of arr){
      const days = Math.ceil( (new Date(ev.fecha)-new Date(today)) / 86400000 );
      const card = document.createElement('div'); card.className='card';
      card.innerHTML = `<div class="date">${ev.fecha}</div><div style="font-size:16px;font-weight:700">${esc(ev.titulo)}</div><div class="days">${days>=0? (days+" d√≠as restantes"): ("‚ö†Ô∏è " + Math.abs(days) + " d√≠as de atraso")}</div>${ev.plan? `<div style="margin-top:.3rem">üóÇÔ∏è ${esc(ev.plan)}</div>`:''}<div style="margin-top:.4rem;display:flex;gap:.4rem"><button data-id="${ev.id}" class="evt-del">Eliminar</button></div>`;
      list.appendChild(card);
    }
    list.querySelectorAll('.evt-del').forEach(b=> b.addEventListener('click', ()=>{ if(confirm('¬øEliminar evento?')){ app.state.events = app.state.events.filter(x=>x.id!==b.dataset.id); save(); renderEvents(); } }));
  }

  // Export / Import / Reset
  function exportJSON(){ const blob = new Blob([JSON.stringify(app.state,null,2)], {type:'application/json'}); const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download='psico-kit-backup.json'; a.click(); URL.revokeObjectURL(a.href); }
  function importJSON(file){ const reader = new FileReader(); reader.onload = (e)=>{ try{ const data = JSON.parse(e.target.result); if(validateData(data)){ app.state=data; save(); afterImport(); } else alert('Archivo no v√°lido'); } catch(err){ alert('Error leyendo JSON'); } }; reader.readAsText(file); }
  function validateData(d){ return d && ['notes','nodes','edges','refs','events'].every(k=> Array.isArray(d[k])); }
  function afterImport(){ renderBoard(); refreshTags(); renderMap(); renderRefs(); renderEvents(); }

  // MODAL helpers
  function htmlFrag(html){ const div=document.createElement('div'); div.innerHTML = html; return div; }
  function esc(s){ return (s||'').toString().replace(/[&<>]/g, ch=> ({'&':'&amp;','<':'&lt;','>':'&gt;'}[ch]) ); }
  function openModal(title, bodyNode, onOk){ const m=el('#modal'); el('#modalTitle').textContent=title; const b=el('#modalBody'); b.innerHTML=''; b.appendChild(bodyNode); m.style.display='flex';
    const ok=el('#modalOk'); const cancel=el('#modalCancel'); const close=el('#modalClose');
    const off=()=>{ m.style.display='none'; ok.onclick=cancel.onclick=close.onclick=null; };
    ok.onclick = ()=>{ onOk&&onOk(); off(); };
    cancel.onclick = close.onclick = off; }
  function closeModal(){ el('#modal').style.display='none'; }

  // INIT
  load();
  // header tabs
  els('.tab-btn').forEach(b=> b.addEventListener('click', ()=>{ switchTab(b.dataset.tab); if(b.dataset.tab==='board'){ renderBoard(); } if(b.dataset.tab==='map'){ renderMap(); } if(b.dataset.tab==='library'){ renderRefs(); } if(b.dataset.tab==='crono'){ renderEvents(); } }));
  // global search
  el('#globalSearch').addEventListener('input', ()=>{ if(app.tab==='board'){ renderBoard(); } if(app.tab==='map'){ renderMap(); } if(app.tab==='library'){ renderRefs(); } });
  document.addEventListener('keydown', (e)=>{
    if((e.ctrlKey||e.metaKey) && e.key.toLowerCase()==='f'){ e.preventDefault(); el('#globalSearch').focus(); el('#globalSearch').select(); }
    if(e.key.toLowerCase()==='n' && app.tab==='board'){ e.preventDefault(); newNote(); }
    if(e.key==='Delete' && app.tab==='map' && app.sel && app.sel.type==='node'){ deleteNode(app.sel.index); }
  });

  // BOARD toolbar
  el('#btnNewNote').addEventListener('click', newNote);
  el('#btnCenterBoard').addEventListener('click', ()=>{ el('#board-wrap').scrollTo({top:100,left:100,behavior:'smooth'}); });
  el('#btnClearFilters').addEventListener('click', ()=>{ els('#tagChips .chip').forEach(c=>c.classList.remove('active')); el('#globalSearch').value=''; renderBoard(); });

  function newNote(){ app.state.notes.push({id:id('n'), title:'Nueva nota', text:'', tags:[], color: palette[Math.floor(Math.random()*palette.length)], x: 120 + Math.random()*400, y: 120 + Math.random()*200}); save(); refreshTags(); renderBoard(); }

  // MAP toolbar
  initSVG(); renderMap();
  el('#btnConnect').addEventListener('click', toggleConnect);
  el('#btnCenterMap').addEventListener('click', centerMap);
  el('#btnNewNode').addEventListener('click', ()=> createNode( Math.random()*800+200, Math.random()*400+160 ));

  // LIBRARY
  renderRefs();
  el('#refAdd').addEventListener('click', ()=>{
    const r = { id:id('r'), autor: el('#refAutor').value.trim(), anio: el('#refAnio').value.trim(), obra: el('#refObra').value.trim(), tema: el('#refTema').value.trim(), palabras: el('#refPalabras').value.trim(), cita: el('#refCita').value.trim() };
    if(!r.autor || !r.cita){ alert('Autor y Cita son obligatorios'); return; }
    addRef(r); el('#refForm').reset();
  });
  el('#refSearch').addEventListener('input', renderRefs);
  el('#btnAddRef').addEventListener('click', ()=> el('#refAutor').focus());

  // CRONO
  renderEvents();
  el('#btnAddEvent').addEventListener('click', ()=>{
    const t = el('#evtTitle').value.trim(); const d = el('#evtDate').value; const p = el('#evtPlan').value.trim();
    if(!t||!d){ alert('Completa t√≠tulo y fecha'); return; }
    app.state.events.push({ id:id('e'), titulo:t, fecha:d, plan:p }); save(); renderEvents(); el('#eventForm').reset();
  });

  // Export/Import/Reset
  el('#btnExport').addEventListener('click', exportJSON);
  el('#fileImport').addEventListener('change', (e)=>{ const f=e.target.files[0]; if(f) importJSON(f); e.target.value=''; });
  el('#btnReset').addEventListener('click', ()=>{ if(confirm('Esto borrar√° todas las notas, nodos, citas y eventos. ¬øContinuar?')){ localStorage.removeItem(STORAGE_KEY); load(); afterImport(); }});

  // First renders
  renderBoard(); refreshTags();
})();
</script>
</body>
</html>
